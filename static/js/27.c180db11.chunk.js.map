{"version":3,"sources":["views/Test/Tree/index.jsx"],"names":["TreeNode","TreeDemo","props","traverseTree","node","length","map","n","title","name","key","blockTmplId","child","onDrop","info","dragItem","ar","i","dropKey","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","loop","data","callback","forEach","item","index","arr","state","gData","key1","key2","dropItem","level","compareLevel","splice","console","log","setState","this","className","defaultExpandAll","draggable","blockNode","showLine","Component"],"mappings":"yMASQA,EAAR,IAAQA,SAEFC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA8DRC,aAAe,SAACC,GACd,GAAIA,GAAQA,EAAKC,OACf,OAAOD,EAAKE,KAAI,SAACC,GAAD,OACd,kBAACP,EAAD,CAAUQ,MAAOD,EAAEE,KAAMC,IAAKH,EAAEI,aAC7BJ,EAAEK,OAAS,EAAKT,aAAaI,EAAEK,YAnErB,EAyEnBC,OAAS,SAACC,GACR,IAsCMC,EAMAC,EACAC,EA7CAC,EAAUJ,EAAKV,KAAKF,MAAMiB,SAC1BC,EAAUN,EAAKO,SAASnB,MAAMiB,SAC9BG,EAAUR,EAAKV,KAAKF,MAAMqB,IAAIC,MAAM,KACpCC,EAAeX,EAAKW,aAAeC,OAAOJ,EAAQA,EAAQjB,OAAS,IAEnEsB,EAAO,SAAPA,EAAQC,EAAMlB,EAAKmB,GACvBD,EAAKE,SAAQ,SAACC,EAAMC,EAAOC,GAEzB,OAAIF,EAAKpB,aAAeD,EACfmB,EAASE,EAAMC,EAAOC,GAE3BF,EAAKnB,MACAe,EAAKI,EAAKnB,MAAOF,EAAKmB,QAD/B,MAwBED,EAAI,YAAO,EAAKM,MAAMC,QAlBP,SAACP,EAAMQ,EAAMC,GAChC,IAAItB,EAIAuB,EAIJ,OAPAX,EAAKC,EAAMQ,GAAM,SAACL,GAChBhB,EAAWgB,KAGbJ,EAAKC,EAAMS,GAAM,SAACN,GAChBO,EAAWP,KAGXhB,GACAuB,GACAvB,EAASwB,OACTD,EAASC,OACTxB,EAASwB,QAAUD,EAASC,OAM5BC,CAAaZ,EAAMR,EAASF,KAE9BS,EAAKC,EAAMR,GAAS,SAACW,EAAMC,EAAOC,GAChCA,EAAIQ,OAAOT,EAAO,GAClBjB,EAAWgB,KAEbW,QAAQC,IAAI,OAAQf,GAGpBD,EAAKC,EAAMV,GAAS,SAACa,EAAMC,EAAOC,GAChCjB,EAAKiB,EACLhB,EAAIe,MAEgB,IAAlBP,EACFT,EAAGyB,OAAOxB,EAAG,EAAGF,GAEhBC,EAAGyB,OAAOxB,EAAI,EAAG,EAAGF,IAGxB,EAAK6B,SAAS,CACZT,MAAOP,KAjIT,EAAKM,MAAQ,CACXC,MAAO,CACL,CACExB,YAAa,GACbF,KAAM,oDACN8B,MAAO,EACP3B,MAAO,CACL,CACED,YAAa,GACbF,KAAM,uEACNG,MAAO,QAIb,CACED,YAAa,GACbF,KAAM,oDACN8B,MAAO,EACP3B,MAAO,CACL,CACED,YAAa,GACbF,KAAM,6EACNG,MAAO,QAIb,CACED,YAAa,GACbF,KAAM,oDACN8B,MAAO,EACP3B,MAAO,CACL,CACED,YAAa,GACbF,KAAM,6EACNG,MAAO,QAIb,CACED,YAAa,GACbF,KAAM,oDACN8B,MAAO,EACP3B,MAAO,CACL,CACED,YAAa,GACbF,KAAM,6EACNG,MAAO,QAIb,CACED,YAAa,GACbF,KAAM,2BACN8B,MAAO,EACP3B,MAAO,QAxDI,E,0CAuInB,WACE,IAAQuB,EAAUU,KAAKX,MAAfC,MAER,OACE,uBACEW,UAAU,iBACVC,kBAAgB,EAChBC,WAAS,EACTC,WAAS,EACTC,UAAQ,EACRrC,OAAQgC,KAAKhC,QAEb,kBAACb,EAAD,CAAUQ,MAAM,eAAKE,IAAI,MACtBmC,KAAK1C,aAAagC,S,GArJNgB,aA4JRlD","file":"static/js/27.c180db11.chunk.js","sourcesContent":["/* eslint-disable consistent-return */\r\n/* eslint-disable no-plusplus */\r\n/* eslint-disable react/no-access-state-in-setstate */\r\n/* eslint-disable react/destructuring-assignment */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-console */\r\nimport React, { Component } from 'react';\r\nimport { Tree } from 'antd';\r\n\r\nconst { TreeNode } = Tree;\r\n\r\nclass TreeDemo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      gData: [\r\n        {\r\n          blockTmplId: 25,\r\n          name: '顶部轮播_产品详情',\r\n          level: 2,\r\n          child: [\r\n            {\r\n              blockTmplId: 23,\r\n              name: '素材库_顶部轮播_产品详情',\r\n              child: null,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blockTmplId: 29,\r\n          name: '产品功能_产品详情',\r\n          level: 2,\r\n          child: [\r\n            {\r\n              blockTmplId: 27,\r\n              name: '功能单元_产品功能_产品详情',\r\n              child: null,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blockTmplId: 33,\r\n          name: '产品优势_产品详情',\r\n          level: 2,\r\n          child: [\r\n            {\r\n              blockTmplId: 31,\r\n              name: '优势单元_产品优势_产品详情',\r\n              child: null,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blockTmplId: 37,\r\n          name: '行业应用_产品详情',\r\n          level: 2,\r\n          child: [\r\n            {\r\n              blockTmplId: 35,\r\n              name: '应用单元_行业应用_产品详情',\r\n              child: null,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          blockTmplId: 21,\r\n          name: '联系方式',\r\n          level: 2,\r\n          child: null,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  // 遍历子节点树，生成树节点\r\n  traverseTree = (node) => {\r\n    if (node && node.length) {\r\n      return node.map((n) => (\r\n        <TreeNode title={n.name} key={n.blockTmplId}>\r\n          {n.child && this.traverseTree(n.child)}\r\n        </TreeNode>\r\n      ));\r\n    }\r\n  };\r\n\r\n  onDrop = (info) => {\r\n    const dropKey = info.node.props.eventKey;\r\n    const dragKey = info.dragNode.props.eventKey;\r\n    const dropPos = info.node.props.pos.split('-');\r\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n    const loop = (data, key, callback) => {\r\n      data.forEach((item, index, arr) => {\r\n        // eslint-disable-next-line eqeqeq\r\n        if (item.blockTmplId == key) {\r\n          return callback(item, index, arr);\r\n        }\r\n        if (item.child) {\r\n          return loop(item.child, key, callback);\r\n        }\r\n      });\r\n    };\r\n\r\n    const compareLevel = (data, key1, key2) => {\r\n      let dragItem;\r\n      loop(data, key1, (item) => {\r\n        dragItem = item;\r\n      });\r\n      let dropItem;\r\n      loop(data, key2, (item) => {\r\n        dropItem = item;\r\n      });\r\n      return (\r\n        dragItem &&\r\n        dropItem &&\r\n        dragItem.level &&\r\n        dropItem.level &&\r\n        dragItem.level === dropItem.level\r\n      );\r\n    };\r\n\r\n    const data = [...this.state.gData];\r\n\r\n    if (compareLevel(data, dragKey, dropKey)) {\r\n      let dragItem;\r\n      loop(data, dragKey, (item, index, arr) => {\r\n        arr.splice(index, 1);\r\n        dragItem = item;\r\n      });\r\n      console.log('data', data);\r\n      let ar;\r\n      let i;\r\n      loop(data, dropKey, (item, index, arr) => {\r\n        ar = arr;\r\n        i = index;\r\n      });\r\n      if (dropPosition === -1) {\r\n        ar.splice(i, 0, dragItem);\r\n      } else {\r\n        ar.splice(i + 1, 0, dragItem);\r\n      }\r\n    }\r\n    this.setState({\r\n      gData: data,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { gData } = this.state;\r\n\r\n    return (\r\n      <Tree\r\n        className=\"draggable-tree\"\r\n        defaultExpandAll\r\n        draggable\r\n        blockNode\r\n        showLine\r\n        onDrop={this.onDrop}\r\n      >\r\n        <TreeNode title=\"全部\" key=\"-1\">\r\n          {this.traverseTree(gData)}\r\n        </TreeNode>\r\n      </Tree>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreeDemo;\r\n"],"sourceRoot":""}